const vscode = require("vscode");
const utils = require("../utils.js");

const defaultConfig = utils.ReadFile(`${__dirname}\\defaultConfig.json`, `utf8`);

class Session {
    constructor(workspace, autoStart) {
        this.workspace = workspace;

        // Make sure a src folder exists
        if (!this.fileExists(`src`)) {
            throw new Error(`No src folder found.`);
        }

        // Look for own configuration
        this.config = this.readFile(`.modulehelper.json`);
        if (!this.config) {
            if (!autoStart) {
                this.writeFile(".modulehelper.json", defaultConfig);
            }
            throw new Error(`Could not find configuration so created one for you. Please modify it and try again.`);
        }

        // Look for rojo configuration
        this.rojoConfig = this.readFile(`${this.config.RojoProject}.json`);
        if (!this.rojoConfig) {
            throw new Error(`Could not find rojo project ${this.config.RojoProject}.`);
        }

        // Check if a module with the name already exists to prevent overwrite
        var exists = this.readFile(`src/${this.config.ModuleName}.lua`);
        if (exists && !exists.includes("-- Generated by the ModuleHelper extension") && exists != "") {
            throw new Error(
                `Found a lua file already named ${this.config.ModuleName}. Please change one of the names to avoid overwriting.`
            );
        }

        // Create a rojoTreeMap
        this.rojoMap = utils.MapRojoTree(this.rojoConfig.tree);

        // Create fileSystemWatcher
        const watcher = vscode.workspace.createFileSystemWatcher("**/*.lua", false, false, false);
        const refreshFunc = this.refresh.bind(this);
        watcher.onDidChange(refreshFunc);
        watcher.onDidCreate(refreshFunc);
        watcher.onDidDelete(refreshFunc);
        this.watcher = watcher;
        refreshFunc();

        console.log(`Successfully created new session in ${this.workspace}`);
    }

    cleanup() {
        this.watcher.dispose();
    }

    writeFile(path, contents) {
        return utils.WriteFile(`${this.workspace}/${path}`, contents);
    }
    readFile(path) {
        return utils.ReadFile(`${this.workspace}/${path}`);
    }
    fileExists(path) {
        return utils.FileExists(`${this.workspace}/${path}`);
    }

    // Refreshes everything
    refresh(uri) {
        if (uri && uri.path.endsWith(`/src/${this.config.ModuleName}.lua`)) return; // don't detect changes on own module

        const workspace = this.workspace;
        const config = this.config;
        const rojoMap = this.rojoMap;
        const sourceMap = utils.BuildFileMap(`${this.workspace}/src`);

        const lines = [
            `-- Generated by the ModuleHelper extension`,
            `-- Last edited ${new Date()}`,
            ``,
            `local modules = {}`,
            ``,
        ];

        const categories = {};
        function addCategory(name) {
            if (categories[name]) return;
            categories[name] = true;
            lines.push(`modules.${name} = {}`);
        }

        function traverse(files) {
            files.forEach((file) => {
                if (file.type == "module") {
                    if (file.path == `${workspace}/src/${config.ModuleName}.lua`.replace(/\//g, "\\")) return; // don't add self

                    const inGamePath = `${utils.GetInGamePath(file.path, rojoMap)}.${file.name}`;

                    function fileIsIn(directoryPath) {
                        directoryPath = `${workspace}/src/${directoryPath}`.replace(/\//g, "\\");
                        return file.path.startsWith(directoryPath);
                    }

                    // check IndexedFolders
                    let index;
                    config.IndexedFolders.forEach((directoryPath) => {
                        directoryPath = directoryPath.replace(/\//g, "\\");
                        if (fileIsIn(directoryPath)) {
                            const split = directoryPath.split("\\");
                            index = split[split.length - 1];
                        }
                    });
                    if (index) {
                        addCategory(index);
                    }

                    // check client / server restricted
                    var restricted = false;
                    config.ServerRestricted.forEach((directoryPath) => {
                        directoryPath = directoryPath.replace(/\//g, "\\");
                        if (fileIsIn(directoryPath)) {
                            restricted = "Server";
                        }
                    });
                    config.ClientRestricted.forEach((directoryPath) => {
                        directoryPath = directoryPath.replace(/\//g, "\\");
                        if (fileIsIn(directoryPath)) {
                            if (restricted) {
                                // restricted to both server and client so it is shared (dont do anything extra with it)
                                restricted = false;
                                return;
                            }
                            restricted = "Client";
                        }
                    });

                    let line = `modules.${index ? index + "." : ""}${file.name} = require(${inGamePath})`;
                    if (restricted) {
                        line = `if game:GetService("RunService"):Is${restricted}() then\n	${line}\nend`;
                    }

                    lines.push(line);
                } else if (file.type == "directory") {
                    traverse(file.children);
                }
            });
        }

        traverse(sourceMap);

        lines.push(``);
        lines.push(`return modules`);

        this.writeFile(`src/${config.ModuleName}.lua`, lines.join(`\n`));
    }
}

module.exports = Session;
